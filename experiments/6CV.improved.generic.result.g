# Problem: gap verschluckt zeichen beim Einfuegen (wenn es gaanz  viele sind)


LoadPackage("float");
LoadPackage("fr");

RereadPackage("fr","hurwitz/gap/utils.gd");
RereadPackage("fr","hurwitz/gap/utils.gi");

RereadPackage("fr","hurwitz/gap/padicLift.gd");
RereadPackage("fr","hurwitz/gap/padicLift.gi");
 
RereadPackage("fr","hurwitz/gap/hurwitz.gd");
RereadPackage("fr","hurwitz/gap/hurwitz.gi");


SetFloats( MPC, 100 );
   
finiteField :=GF (11);

rng :=  PolynomialRing( finiteField, 1);
x_1:=IndeterminatesOfPolynomialRing(rng)[1];

hmsProblem:=rec( complexCriticalValues := [ infinity, .0e0, .1e1, .2e1, .4e1, .9e1 ], criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], 
      [ 2, 0 ], [ 4, 0 ], [ 9, 0 ] ], dataType := "HurwitzMapSearchProblem", 
  normalizationRules := [ rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 1, root := infinity ), 
      rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 2, root := 0 ), 
      rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 3, root := 1 ) ], 
  shapes := [ rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ) ] );

polTuple:=[ x_1^2+Z(11)^9*x_1-Z(11)^0, x_1^4-x_1^3+Z(11)^2*x_1^2, x_1^4-x_1^3+Z(11)^7*x_1^2+Z(11)^7*x_1+Z(11)^3, x_1^4-x_1^3-x_1^2+Z(11)^8*x_1+Z(11)^4,   x_1^4-x_1^3+Z(11)^4*x_1^2+Z(11)^9*x_1-Z(11)^0, x_1^4-x_1^3+Z(11)^6*x_1^2+Z(11)^3*x_1+Z(11)^9 ];

lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);          

 
  
hmsProblem:= rec( complexCriticalValues := [ infinity, .0e0, .1e1, .2e1, .8e1, .5e1 ], criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], 
      [ 2, 0 ], [ 8, 0 ], [ 5, 0 ] ], dataType := "HurwitzMapSearchProblem", 
  normalizationRules := [ rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 1, root := infinity ), 
      rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 2, root := 0 ), 
      rec( dataType := "NormalizationRule", multiplicity := 2, polynomialId := 3, root := 1 ) ], 
  shapes := [ rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ), 
      rec( dataType := "Shape", degree := 4, partition := [ 2, 1, 1 ] ) ] );

 polTuple:=[ x_1^2+Z(11)*x_1+Z(11)^2, x_1^4+Z(11)^8*x_1^3+Z(11)^6*x_1^2, x_1^4+Z(11)^8*x_1^3+Z(11)^2*x_1^2+x_1+Z(11), 
  x_1^4+Z(11)^8*x_1^3-x_1^2+Z(11)*x_1+Z(11)^2, x_1^4+Z(11)^8*x_1^3+Z(11)*x_1^2+Z(11)^3*x_1+Z(11)^4, 
  x_1^4+Z(11)^8*x_1^3+Z(11)^9*x_1^2+Z(11)^4*x_1-Z(11)^0 ];

  lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
  
  
  
  
  SetFloats( MPC, 100 );
  lifters:=[];
  
  finiteField :=GF (17);

    rng :=  PolynomialRing( finiteField, 1);
    x_1:=IndeterminatesOfPolynomialRing(rng)[1];
  
  hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 10, 0 ], [ 11, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^6*x_1^2+Z(17)^14*x_1+Z(17)^7, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^4*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1+Z(17)^10, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 10, 0 ], [ 11, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^6*x_1^2+Z(17)^14*x_1+Z(17)^7, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^4*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1+Z(17)^10, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 10, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^7, x_1^4+Z(17)^13*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^4*x_1^2+Z(17)^14*x_1+Z(17)^15, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^7*x_1^2+Z(17)^15*x_1+Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^12*x_1^2+Z(17)*x_1+Z(17)^2, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^6*x_1^2+Z(17)^6*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 10, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^7, x_1^4+Z(17)^13*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^4*x_1^2+Z(17)^14*x_1+Z(17)^15, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^7*x_1^2+Z(17)^15*x_1+Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^12*x_1^2+Z(17)*x_1+Z(17)^2, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^6*x_1^2+Z(17)^6*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .13e2+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 13, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^15*x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^4, 
  x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^4*x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .15e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 15, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^14*x_1^2+Z(17)^3*x_1+Z(17)^3, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^4*x_1+Z(17)^4, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2-x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2+Z(17)^9*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^13, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^9*x_1^2+Z(17)^12*x_1+Z(17)^3, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^3*x_1^2+Z(17)^13*x_1+Z(17)^4, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1-Z(17)^0, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^13, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^9*x_1^2+Z(17)^12*x_1+Z(17)^3, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^3*x_1^2+Z(17)^13*x_1+Z(17)^4, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1-Z(17)^0, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^13, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^9*x_1^2+Z(17)^12*x_1+Z(17)^3, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^3*x_1^2+Z(17)^13*x_1+Z(17)^4, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1-Z(17)^0, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^6*x_1+Z(17)^13, x_1^4+Z(17)^5*x_1^3-x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^9*x_1^2+Z(17)^12*x_1+Z(17)^3, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^3*x_1^2+Z(17)^13*x_1+Z(17)^4, x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+Z(17)*x_1-Z(17)^0, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 5, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+x_1^2+Z(17)^7*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^2-x_1+Z(17)^13, 
  x_1^4+Z(17)^12*x_1+Z(17), x_1^4+Z(17)^10*x_1^2+Z(17)^2*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .16e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 16, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+x_1+Z(17)^7, x_1^4+Z(17)^3*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^3*x_1^3-x_1^2+Z(17)^14*x_1+Z(17)^5, 
  x_1^4+Z(17)^3*x_1^3+Z(17)*x_1^2+Z(17)^15*x_1+Z(17)^6, x_1^4+Z(17)^3*x_1^3+Z(17)^13*x_1^2+Z(17)^6*x_1+Z(17)^13, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^4*x_1^2-x_1+Z(17)^15 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+x_1+Z(17)^14, x_1^4+Z(17)^12*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1-Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1+Z(17)^9, x_1^4+Z(17)^12*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^13*x_1^2+Z(17)^6*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+x_1+Z(17)^14, x_1^4+Z(17)^12*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1-Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1+Z(17)^9, x_1^4+Z(17)^12*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^13*x_1^2+Z(17)^6*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+x_1+Z(17)^14, x_1^4+Z(17)^12*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1-Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1+Z(17)^9, x_1^4+Z(17)^12*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^13*x_1^2+Z(17)^6*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+x_1+Z(17)^14, x_1^4+Z(17)^12*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1-Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1+Z(17)^9, x_1^4+Z(17)^12*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^13*x_1^2+Z(17)^6*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .14e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 14, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^13*x_1+Z(17)^5, x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^4*x_1^2+Z(17)^13*x_1+Z(17)^5, 
  x_1^4+Z(17)*x_1^3+Z(17)^6*x_1^2+Z(17)^14*x_1+Z(17)^6, x_1^4+Z(17)*x_1^3+Z(17)^2*x_1^2+Z(17)^6*x_1+Z(17)^14, 
  x_1^4+Z(17)*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^15 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .14e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 14, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^13*x_1+Z(17)^5, x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^4*x_1^2+Z(17)^13*x_1+Z(17)^5, 
  x_1^4+Z(17)*x_1^3+Z(17)^6*x_1^2+Z(17)^14*x_1+Z(17)^6, x_1^4+Z(17)*x_1^3+Z(17)^2*x_1^2+Z(17)^6*x_1+Z(17)^14, 
  x_1^4+Z(17)*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^15 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .7e1+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 7, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^11, x_1^4+Z(17)^9*x_1^3+Z(17)^2*x_1^2, x_1^4+Z(17)^9*x_1^3+Z(17)^3*x_1^2+Z(17)^14*x_1+Z(17)^11, 
  x_1^4+Z(17)^9*x_1^3+Z(17)^13*x_1^2+Z(17)^15*x_1+Z(17)^12, x_1^4+Z(17)^9*x_1^3-x_1^2+Z(17)^9*x_1+Z(17)^6, 
  x_1^4+Z(17)^9*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .3e1+.0e0i, .7e1+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 3, 0 ], [ 7, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^11, x_1^4+Z(17)^9*x_1^3+Z(17)^2*x_1^2, x_1^4+Z(17)^9*x_1^3+Z(17)^3*x_1^2+Z(17)^14*x_1+Z(17)^11, 
  x_1^4+Z(17)^9*x_1^3+Z(17)^13*x_1^2+Z(17)^15*x_1+Z(17)^12, x_1^4+Z(17)^9*x_1^3-x_1^2+Z(17)^9*x_1+Z(17)^6, 
  x_1^4+Z(17)^9*x_1^3+Z(17)^12*x_1^2+Z(17)^11*x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .13e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 13, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^13, x_1^4+Z(17)^10*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^10*x_1^3+Z(17)^14*x_1^2+Z(17)^14*x_1+Z(17)^12, 
  x_1^4+Z(17)^10*x_1^3+Z(17)^5*x_1^2+Z(17)*x_1+Z(17)^15, x_1^4+Z(17)^10*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^10*x_1^3+Z(17)^10*x_1^2+Z(17)^12*x_1+Z(17)^10 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .13e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 13, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^13, x_1^4+Z(17)^10*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^10*x_1^3+Z(17)^14*x_1^2+Z(17)^14*x_1+Z(17)^12, 
  x_1^4+Z(17)^10*x_1^3+Z(17)^5*x_1^2+Z(17)*x_1+Z(17)^15, x_1^4+Z(17)^10*x_1^3+Z(17)^15*x_1^2+Z(17)^2*x_1+Z(17)^0, 
  x_1^4+Z(17)^10*x_1^3+Z(17)^10*x_1^2+Z(17)^12*x_1+Z(17)^10 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^12, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)^12*x_1^2+Z(17)^10*x_1+Z(17)^5, 
  x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^15*x_1+Z(17)^10, 
  x_1^4-x_1^3-x_1^2+Z(17)^3*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^12, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)^12*x_1^2+Z(17)^10*x_1+Z(17)^5, 
  x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^15*x_1+Z(17)^10, 
  x_1^4-x_1^3-x_1^2+Z(17)^3*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .15e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 15, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^14, x_1^4+Z(17)^12*x_1^3+Z(17)^10*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^3*x_1^2+Z(17)^6*x_1+Z(17)^12, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^7*x_1^2+Z(17)^9*x_1+Z(17)^15, x_1^4+Z(17)^12*x_1^3+Z(17)^12*x_1^2+Z(17)^12*x_1+Z(17)^2, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^15*x_1^2+Z(17)^14*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .15e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 15, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^0, x_1^4+Z(17)^3*x_1^3+Z(17)^7*x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^3*x_1^2+Z(17)^9*x_1-Z(17)^0, 
  x_1^4+Z(17)^3*x_1^3+x_1^2+Z(17)^12*x_1+Z(17)^11, x_1^4+Z(17)^3*x_1^3+Z(17)^4*x_1^2+Z(17)^15*x_1+Z(17)^14, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^11*x_1^2+Z(17)^5*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .15e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 15, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^0, x_1^4+Z(17)^3*x_1^3+Z(17)^7*x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^3*x_1^2+Z(17)^9*x_1-Z(17)^0, 
  x_1^4+Z(17)^3*x_1^3+x_1^2+Z(17)^12*x_1+Z(17)^11, x_1^4+Z(17)^3*x_1^3+Z(17)^4*x_1^2+Z(17)^15*x_1+Z(17)^14, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^11*x_1^2+Z(17)^5*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^5, x_1^4+Z(17)^6*x_1^3-x_1^2, x_1^4+Z(17)^6*x_1^3+Z(17)^11*x_1^2+Z(17)^5*x_1+Z(17)^15, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^7*x_1^2-x_1+Z(17)^2, x_1^4+Z(17)^6*x_1^3+Z(17)^14*x_1^2+Z(17)^12*x_1+Z(17)^6, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^10*x_1^2+Z(17)^13*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^13, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^6*x_1^2+x_1+Z(17)^15, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^2, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^6, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^3*x_1^2+Z(17)^10*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^13, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^6*x_1^2+x_1+Z(17)^15, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^2, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^6, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^3*x_1^2+Z(17)^10*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^13, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^6*x_1^2+x_1+Z(17)^15, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^2, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^6, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^3*x_1^2+Z(17)^10*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^13, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^6*x_1^2+x_1+Z(17)^15, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^2, x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)^7*x_1+Z(17)^6, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^3*x_1^2+Z(17)^10*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .11e2+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 11, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^13*x_1^3-x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^13*x_1^2+Z(17)^12*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^14*x_1^2+Z(17)^9*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 16, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4-x_1^3+x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^11*x_1+Z(17)^4, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^13*x_1+Z(17)^6 
 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 16, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4-x_1^3+x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^11*x_1+Z(17)^4, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^13*x_1+Z(17)^6 
 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 16, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4-x_1^3+x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^11*x_1+Z(17)^4, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^13*x_1+Z(17)^6 
 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .16e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 16, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1-Z(17)^0, x_1^4-x_1^3+Z(17)^11*x_1^2, x_1^4-x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^12, 
  x_1^4-x_1^3+x_1^2+Z(17)^6*x_1+Z(17)^15, x_1^4-x_1^3+Z(17)^7*x_1^2+Z(17)^11*x_1+Z(17)^4, x_1^4-x_1^3+Z(17)^2*x_1^2+Z(17)^13*x_1+Z(17)^6 
 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^11, x_1^4+Z(17)^6*x_1^3+Z(17)^13*x_1^2, x_1^4+Z(17)^6*x_1^3+Z(17)^7*x_1^2+Z(17)^9*x_1+Z(17)^3, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^14*x_1^2+Z(17)^12*x_1+Z(17)^6, x_1^4+Z(17)^6*x_1^3+Z(17)^6*x_1^2+Z(17)^2*x_1+Z(17)^12, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^5*x_1^2+Z(17)^4*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)*x_1+Z(17)^11, x_1^4+Z(17)^6*x_1^3+Z(17)^13*x_1^2, x_1^4+Z(17)^6*x_1^3+Z(17)^7*x_1^2+Z(17)^9*x_1+Z(17)^3, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^14*x_1^2+Z(17)^12*x_1+Z(17)^6, x_1^4+Z(17)^6*x_1^3+Z(17)^6*x_1^2+Z(17)^2*x_1+Z(17)^12, 
  x_1^4+Z(17)^6*x_1^3+Z(17)^5*x_1^2+Z(17)^4*x_1+Z(17)^14 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7*x_1+Z(17)^9, x_1^4+Z(17)*x_1^3+Z(17)^12*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^5*x_1^2+Z(17)^7*x_1+Z(17)^9, 
  x_1^4+Z(17)*x_1^3+Z(17)^9*x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)*x_1^3+x_1^2+x_1+Z(17)^2, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^2*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7*x_1+Z(17)^9, x_1^4+Z(17)*x_1^3+Z(17)^12*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^5*x_1^2+Z(17)^7*x_1+Z(17)^9, 
  x_1^4+Z(17)*x_1^3+Z(17)^9*x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)*x_1^3+x_1^2+x_1+Z(17)^2, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^2*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7*x_1+Z(17)^9, x_1^4+Z(17)*x_1^3+Z(17)^12*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^5*x_1^2+Z(17)^7*x_1+Z(17)^9, 
  x_1^4+Z(17)*x_1^3+Z(17)^9*x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)*x_1^3+x_1^2+x_1+Z(17)^2, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^2*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7*x_1+Z(17)^9, x_1^4+Z(17)*x_1^3+Z(17)^12*x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^5*x_1^2+Z(17)^7*x_1+Z(17)^9, 
  x_1^4+Z(17)*x_1^3+Z(17)^9*x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)*x_1^3+x_1^2+x_1+Z(17)^2, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^2*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .7e1+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 7, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^12*x_1+Z(17)^4, x_1^4+Z(17)^4*x_1^3+Z(17)^7*x_1^2, x_1^4+Z(17)^4*x_1^3+Z(17)*x_1^2+Z(17)^14*x_1+Z(17)^6, 
  x_1^4+Z(17)^4*x_1^3-x_1^2+Z(17)*x_1+Z(17)^9, x_1^4+Z(17)^4*x_1^3+Z(17)^15*x_1^2+Z(17)^9*x_1+Z(17), 
  x_1^4+Z(17)^4*x_1^3+Z(17)^4*x_1^2+Z(17)^10*x_1+Z(17)^2 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .1e2+.0e0i, .2e1+.0e0i, .6e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 10, 0 ], [ 2, 0 ], [ 6, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^10, x_1^4+Z(17)^5*x_1^3+Z(17)^11*x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^5*x_1^2+Z(17)^5*x_1+Z(17)^0, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^12*x_1^2-x_1+Z(17)^3, x_1^4+Z(17)^5*x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^14, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^13*x_1^2+Z(17)^4*x_1+Z(17)^15 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^9*x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^13*x_1^2+Z(17)^3*x_1+Z(17)^5, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^3*x_1^2+Z(17)^7*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)*x_1^3+Z(17)^10*x_1^2, x_1^4+Z(17)*x_1^3+x_1^2+Z(17)^14*x_1+Z(17)^3, 
  x_1^4+Z(17)*x_1^3+Z(17)^14*x_1^2+Z(17)^2*x_1+Z(17)^7, x_1^4+Z(17)*x_1^3+Z(17)^11*x_1^2+Z(17)^3*x_1-Z(17)^0, 
  x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2+Z(17)^7*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^10*x_1+Z(17)^12, x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^9*x_1^2+Z(17)^2*x_1+Z(17)^4, x_1^4+Z(17)^14*x_1^3+Z(17)^13*x_1^2+Z(17)^3*x_1+Z(17)^5, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^3*x_1^2+Z(17)^7*x_1+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^11*x_1+Z(17)^0, x_1^4+Z(17)*x_1^3+Z(17)^10*x_1^2, x_1^4+Z(17)*x_1^3+x_1^2+Z(17)^14*x_1+Z(17)^3, 
  x_1^4+Z(17)*x_1^3+Z(17)^14*x_1^2+Z(17)^2*x_1+Z(17)^7, x_1^4+Z(17)*x_1^3+Z(17)^11*x_1^2+Z(17)^3*x_1-Z(17)^0, 
  x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2+Z(17)^7*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7, x_1^4+Z(17)^3*x_1^3+x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^15, x_1^4+Z(17)^3*x_1^3+Z(17)^5*x_1^2+Z(17)^3, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^4*x_1^2+Z(17)^4, x_1^4+Z(17)^3*x_1^3+Z(17)^3*x_1^2+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .13e2+.0e0i, .5e1+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 13, 0 ], [ 5, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7, x_1^4+Z(17)^3*x_1^3+x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^15, x_1^4+Z(17)^3*x_1^3+Z(17)^5*x_1^2+Z(17)^3, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^4*x_1^2+Z(17)^4, x_1^4+Z(17)^3*x_1^3+Z(17)^3*x_1^2+Z(17)^9 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^14, x_1^4+x_1^3+Z(17)^12*x_1^2, x_1^4+x_1^3+Z(17)^4*x_1^2+x_1+Z(17)^0, 
  x_1^4+x_1^3+Z(17)^6*x_1^2+Z(17)^5*x_1+Z(17)^5, x_1^4+x_1^3+x_1^2+Z(17)^7*x_1+Z(17)^7, x_1^4+x_1^3+Z(17)^13*x_1^2-x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^14*x_1+Z(17)^14, x_1^4+x_1^3+Z(17)^12*x_1^2, x_1^4+x_1^3+Z(17)^4*x_1^2+x_1+Z(17)^0, 
  x_1^4+x_1^3+Z(17)^6*x_1^2+Z(17)^5*x_1+Z(17)^5, x_1^4+x_1^3+x_1^2+Z(17)^7*x_1+Z(17)^7, x_1^4+x_1^3+Z(17)^13*x_1^2-x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^12*x_1+Z(17)^7, x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2+Z(17)^14*x_1+Z(17)^9, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^10*x_1^2+Z(17)^3*x_1+Z(17)^14, x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^5*x_1+Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^5*x_1^2+Z(17)^6*x_1+Z(17) ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 16, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^12*x_1+Z(17)^7, x_1^4+Z(17)^7*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2+Z(17)^14*x_1+Z(17)^9, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^10*x_1^2+Z(17)^3*x_1+Z(17)^14, x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^5*x_1+Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^5*x_1^2+Z(17)^6*x_1+Z(17) ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^2*x_1^2+Z(17)^15*x_1-Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^4*x_1+Z(17)^13, x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1+Z(17)^15, 
  x_1^4+Z(17)^14*x_1^3-x_1^2-x_1+Z(17) ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .11e2+.0e0i, .14e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 11, 0 ], [ 14, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17), x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^2*x_1^2+Z(17)^15*x_1-Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^14*x_1^2+Z(17)^4*x_1+Z(17)^13, x_1^4+Z(17)^14*x_1^3+Z(17)^6*x_1+Z(17)^15, 
  x_1^4+Z(17)^14*x_1^3-x_1^2-x_1+Z(17) ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .7e1+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 7, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^12, x_1^4+Z(17)^13*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^13*x_1^3+Z(17)^6*x_1^2+Z(17)^6*x_1+Z(17)^10, 
  x_1^4+Z(17)^13*x_1^3+Z(17)^15*x_1^2+Z(17)^11*x_1+Z(17)^15, x_1^4+Z(17)^13*x_1^3+Z(17)^3*x_1^2+Z(17)*x_1+Z(17)^5, 
  x_1^4+Z(17)^13*x_1^3+Z(17)*x_1^2+Z(17)^3*x_1+Z(17)^7 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .12e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 12, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^10, x_1^4+Z(17)^11*x_1^3-x_1^2, x_1^4+Z(17)^11*x_1^3+Z(17)^7*x_1^2+Z(17)^12*x_1+Z(17)^7, 
  x_1^4+Z(17)^11*x_1^3+Z(17)^10*x_1^2+Z(17)*x_1+Z(17)^12, x_1^4+Z(17)^11*x_1^3+Z(17)^11*x_1^2+Z(17)^9*x_1+Z(17)^4, 
  x_1^4+Z(17)^11*x_1^3+Z(17)^15*x_1^2+Z(17)^10*x_1+Z(17)^5 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .12e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 12, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^15*x_1+Z(17)^10, x_1^4+Z(17)^11*x_1^3-x_1^2, x_1^4+Z(17)^11*x_1^3+Z(17)^7*x_1^2+Z(17)^12*x_1+Z(17)^7, 
  x_1^4+Z(17)^11*x_1^3+Z(17)^10*x_1^2+Z(17)*x_1+Z(17)^12, x_1^4+Z(17)^11*x_1^3+Z(17)^11*x_1^2+Z(17)^9*x_1+Z(17)^4, 
  x_1^4+Z(17)^11*x_1^3+Z(17)^15*x_1^2+Z(17)^10*x_1+Z(17)^5 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .12e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 12, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^5*x_1+Z(17)^5, x_1^4+Z(17)^12*x_1^3+Z(17)^7*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^10*x_1^2+Z(17)^14*x_1+Z(17)^14, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^4*x_1^2+Z(17)^3*x_1+Z(17)^3, x_1^4+Z(17)^12*x_1^3+Z(17)^2*x_1^2+Z(17)^11*x_1+Z(17)^11, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^12*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .5e1+.0e0i, .12e2+.0e0i, .2e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 5, 0 ], [ 12, 0 ], [ 2, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^5*x_1+Z(17)^5, x_1^4+Z(17)^12*x_1^3+Z(17)^7*x_1^2, x_1^4+Z(17)^12*x_1^3+Z(17)^10*x_1^2+Z(17)^14*x_1+Z(17)^14, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^4*x_1^2+Z(17)^3*x_1+Z(17)^3, x_1^4+Z(17)^12*x_1^3+Z(17)^2*x_1^2+Z(17)^11*x_1+Z(17)^11, 
  x_1^4+Z(17)^12*x_1^3+Z(17)^5*x_1^2+Z(17)^12*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^5*x_1+Z(17)^12, x_1^4+Z(17)^2*x_1^3+Z(17)^2*x_1^2, x_1^4+Z(17)^2*x_1^3+Z(17)^14*x_1^2-x_1+Z(17)^15, 
  x_1^4+Z(17)^2*x_1^3+Z(17)^15*x_1+Z(17)^6, x_1^4+Z(17)^2*x_1^3-x_1^2+x_1+Z(17)^7, 
  x_1^4+Z(17)^2*x_1^3+Z(17)^6*x_1^2+Z(17)^4*x_1+Z(17)^11 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^5, x_1^4+Z(17)*x_1^3+x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2+Z(17)^9*x_1+Z(17)^12, 
  x_1^4+Z(17)*x_1^3+Z(17)*x_1^2+x_1+Z(17)^3, x_1^4+Z(17)*x_1^3+Z(17)^11*x_1^2+Z(17)*x_1+Z(17)^4, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^5*x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .16e2+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 16, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^2*x_1+Z(17)^5, x_1^4+Z(17)*x_1^3+x_1^2, x_1^4+Z(17)*x_1^3+Z(17)^13*x_1^2+Z(17)^9*x_1+Z(17)^12, 
  x_1^4+Z(17)*x_1^3+Z(17)*x_1^2+x_1+Z(17)^3, x_1^4+Z(17)*x_1^3+Z(17)^11*x_1^2+Z(17)*x_1+Z(17)^4, 
  x_1^4+Z(17)*x_1^3+Z(17)^7*x_1^2+Z(17)^5*x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .14e2+.0e0i, .8e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 14, 0 ], [ 8, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^7*x_1+Z(17)^0, x_1^4+Z(17)^9*x_1^2, x_1^4+Z(17)^5*x_1^2+Z(17)*x_1+Z(17)^10, x_1^4-x_1+Z(17), 
  x_1^4+Z(17)^11*x_1^2+Z(17)^10*x_1+Z(17)^3, x_1^4+Z(17)^3*x_1^2+Z(17)^11*x_1+Z(17)^4 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^10, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^10*x_1^2+Z(17)^6*x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1+Z(17), 
  x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)*x_1+Z(17)^3 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .14e2+.0e0i, .7e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 14, 0 ], [ 7, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^10, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1^2, x_1^4+Z(17)^7*x_1^3+Z(17)^10*x_1^2+Z(17)^6*x_1-Z(17)^0, 
  x_1^4+Z(17)^7*x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1+Z(17)^15, x_1^4+Z(17)^7*x_1^3+Z(17)^15*x_1+Z(17), 
  x_1^4+Z(17)^7*x_1^3+Z(17)*x_1^2+Z(17)*x_1+Z(17)^3 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .8e1+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 8, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^12*x_1+Z(17)^2, x_1^4+Z(17)^3*x_1^3+Z(17)*x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^14*x_1^2+Z(17)^4*x_1+Z(17)^10, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^2*x_1^2+Z(17)^11*x_1+Z(17), x_1^4+Z(17)^3*x_1^3+Z(17)^13*x_1^2+Z(17)^14*x_1+Z(17)^4, 
  x_1^4+Z(17)^3*x_1^3-x_1^2+x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .8e1+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 8, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^12*x_1+Z(17)^2, x_1^4+Z(17)^3*x_1^3+Z(17)*x_1^2, x_1^4+Z(17)^3*x_1^3+Z(17)^14*x_1^2+Z(17)^4*x_1+Z(17)^10, 
  x_1^4+Z(17)^3*x_1^3+Z(17)^2*x_1^2+Z(17)^11*x_1+Z(17), x_1^4+Z(17)^3*x_1^3+Z(17)^13*x_1^2+Z(17)^14*x_1+Z(17)^4, 
  x_1^4+Z(17)^3*x_1^3-x_1^2+x_1+Z(17)^6 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .7e1+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 7, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^10, x_1^4+Z(17)^14*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^5*x_1+Z(17)^7, x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^9*x_1+Z(17)^11, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .7e1+.0e0i, .4e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 7, 0 ], [ 4, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2-x_1+Z(17)^10, x_1^4+Z(17)^14*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^14*x_1^3+Z(17)^7*x_1^2+Z(17)^14*x_1+Z(17)^0, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^10*x_1^2+Z(17)^5*x_1+Z(17)^7, x_1^4+Z(17)^14*x_1^3-x_1^2+Z(17)^9*x_1+Z(17)^11, 
  x_1^4+Z(17)^14*x_1^3+Z(17)^5*x_1^2+Z(17)^10*x_1+Z(17)^12 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .7e1+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 7, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^13*x_1+Z(17)^5, x_1^4+Z(17)^5*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^11, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^10*x_1^2+Z(17)^10*x_1+Z(17)^2, x_1^4+Z(17)^5*x_1^3-x_1^2+Z(17)^14*x_1+Z(17)^6, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .11e2+.0e0i, .7e1+.0e0i, .12e2+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 11, 0 ], [ 7, 0 ], [ 12, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^13*x_1+Z(17)^5, x_1^4+Z(17)^5*x_1^3+Z(17)^4*x_1^2, x_1^4+Z(17)^5*x_1^3+Z(17)^7*x_1^2+Z(17)^3*x_1+Z(17)^11, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^10*x_1^2+Z(17)^10*x_1+Z(17)^2, x_1^4+Z(17)^5*x_1^3-x_1^2+Z(17)^14*x_1+Z(17)^6, 
  x_1^4+Z(17)^5*x_1^3+Z(17)^15*x_1^2+x_1-Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .16e2+.0e0i, .12e2+.0e0i, .6e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 16, 0 ], [ 12, 0 ], [ 6, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^4*x_1+Z(17)^7, x_1^4+Z(17)^15*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^15*x_1^3+Z(17)^5*x_1^2+Z(17)^14*x_1+Z(17), 
  x_1^4+Z(17)^15*x_1^3+Z(17)^15*x_1^2+Z(17)^6*x_1+Z(17)^9, x_1^4+Z(17)^15*x_1^3+Z(17)^10*x_1^2+Z(17)^11*x_1+Z(17)^14, 
  x_1^4+Z(17)^15*x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1+Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;

hmsProblem:= rec(
  complexCriticalValues := [ infinity, .0e0+.0e0i, .1e1+.0e0i, .16e2+.0e0i, .12e2+.0e0i, .6e1+.0e0i ],
  criticalValues := [ [ infinity, infinity ], [ 0, 0 ], [ 1, 0 ], [ 16, 0 ], [ 12, 0 ], [ 6, 0 ] ],
  dataType := "HurwitzMapSearchProblem",
  normalizationRules := [ rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 1,
          root := infinity ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 2,
          root := 0 ), rec(
          dataType := "NormalizationRule",
          multiplicity := 2,
          polynomialId := 3,
          root := 1 ) ],
  shapes := [ rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ), rec(
          dataType := "Shape",
          degree := 4,
          partition := [ 2, 1, 1 ] ) ] );
polTuple:= [ x_1^2+Z(17)^4*x_1+Z(17)^7, x_1^4+Z(17)^15*x_1^3+Z(17)^9*x_1^2, x_1^4+Z(17)^15*x_1^3+Z(17)^5*x_1^2+Z(17)^14*x_1+Z(17), 
  x_1^4+Z(17)^15*x_1^3+Z(17)^15*x_1^2+Z(17)^6*x_1+Z(17)^9, x_1^4+Z(17)^15*x_1^3+Z(17)^10*x_1^2+Z(17)^11*x_1+Z(17)^14, 
  x_1^4+Z(17)^15*x_1^3+Z(17)^7*x_1^2+Z(17)^13*x_1+Z(17)^0 ];
 lifter := Hurwitz@FR.HurwitzMapLifter(polTuple, finiteField, hmsProblem);
if not lifter=fail then  Append(lifters, [lifter]); fi;
          
